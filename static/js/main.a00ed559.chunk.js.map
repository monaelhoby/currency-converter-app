{"version":3,"sources":["components/CurrencyContiener.js","store/actions/actionsType.js","App.js","serviceWorker.js","store/reducer/converterReducer.js","store/reducer/index.js","store/store.js","index.js"],"names":["connect","state","amount","converter","fromValue","fromCurrency","currencies","toValue","toCurrency","result","dispatch","setCurrensis","type","payload","setAmount","setFromCurrensis","setToCurrensis","setResult","props","useEffect","axios","get","then","response","currencyArr","key","data","quotes","newkey","slice","push","catch","err","console","log","message","className","name","value","onChange","event","target","Object","keys","map","i","onClick","valueOfFromCurrency","filter","cur","valueOfToCurrency","toFixed","convertHandler","App","Container","role","aria-label","Boolean","window","location","hostname","match","intialState","Reducer","action","combineReducers","converterReducer","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a00ed559.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport './CurrencyContiener.css';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../store/actions/actionsType';\r\n\r\nconst CurrencyContianer = props => {\r\n  useEffect(  () => {\r\n    axios\r\n         .get(`http://www.apilayer.net/api/live?access_key=8352f6b41464220b277f44d698ea6a34&format=1`)\r\n         .then(response => {\r\n           const currencyArr = ['']\r\n           for (let key in response.data.quotes) {\r\n            let newkey = key.slice(3,6)\r\n                    currencyArr.push({[newkey]:response.data.quotes[key]})\r\n                }\r\n                 props.setCurrensis(currencyArr);\r\n         })\r\n         .catch(err => {\r\n                console.log(\"Opps\", err.message);\r\n            });\r\n  }, [])\r\n  const convertHandler = () => {\r\n          if( props.fromValue !==  props.toValue){\r\n          let fromcurrency =  props.currencies.filter(cur=>Object.keys(cur)[0]=== props.fromValue);\r\n          let valueOfFromCurrency = fromcurrency[0][ props.fromValue];\r\n          let tocurrency =  props.currencies.filter(cur=>Object.keys(cur)[0]=== props.toValue);\r\n          let valueOfToCurrency = tocurrency[0][ props.toValue];\r\n          let amount =  props.amount ;\r\n          let result = amount * valueOfToCurrency / valueOfFromCurrency ;\r\n            props.setResult(result.toFixed(5));\r\n          } else {\r\n           props.setResult({result:\"You cant convert the same currency!\"})\r\n        }\r\n};\r\n  return (\r\n  <div className=\"Converter\">\r\n      <div className=\"Form\">\r\n          <input\r\n              name=\"amount\"\r\n              type=\"text\"\r\n              value={ props.amount}\r\n              onChange={event => { props.setAmount(event.target.value)}}\r\n              />\r\n              <label>From</label>\r\n          <select\r\n              name=\"from\"\r\n              value={ props.fromValue}\r\n              onChange={event => { props.setFromCurrensis(event.target.value)}}\r\n              >\r\n              {Object.keys( props.currencies).map(i=> (\r\n                      <option key={i}>{Object.keys( props.currencies[i])}</option>\r\n                  ))}\r\n          </select>\r\n              <label>To</label>\r\n          <select\r\n              name=\"to\"\r\n              value={ props.toValue}\r\n              onChange={event => { props.setToCurrensis(event.target.value)}}\r\n              >\r\n              {Object.keys( props.currencies).map(i=> (\r\n                      <option key={i}>{Object.keys( props.currencies[i])}</option>\r\n                  ))}\r\n          </select>\r\n          <button onClick={() =>  convertHandler()}>Convert</button>\r\n      </div>\r\n      <div className=\"result\">\r\n    { props.result &&\r\n          <h3>{ props.result}</h3>\r\n      }\r\n      </div>\r\n  </div>\r\n);\r\n}\r\n\r\nconst mapStateToProperty=state=> ({\r\n      amount:state.converter.amount ,\r\n      fromValue:state.converter.fromCurrency ,\r\n      currencies:state.converter.currencies ,\r\n      toValue:state.converter.toCurrency ,\r\n      result:state.converter.result\r\n      });\r\nconst mapDispatchToProp=dispatch=>({\r\n      setCurrensis:(currencies)=>dispatch({type:actions.SET_CURRENSIS,payload:{currencies}}) ,\r\n      setAmount:(amount)=>dispatch({type:actions.AMOUNT_CURRENY,payload:{amount}}),\r\n      setFromCurrensis:(fromCurrency)=>dispatch({type:actions.SELECT_FROM_CURRENY,payload:{fromCurrency}}) ,\r\n      setToCurrensis:(toCurrency)=>dispatch({type:actions.SELECT_TO_CURRENY,payload:{toCurrency}}) ,\r\n      setResult:(result)=>dispatch({type:actions.CONVERTER_ACTION,payload:{result}}),\r\n      // convertHandler:() => dispatch ({type:actions.CONVERT_CURRENSIS})\r\n    });\r\nexport default connect(mapStateToProperty,mapDispatchToProp)(CurrencyContianer);\r\n","export const  CONVERTER_ACTION ='CONVERTER_ACTION';\r\nexport const SELECT_TO_CURRENY ='SELECT_TO_CURRENY';\r\nexport const SELECT_FROM_CURRENY ='SELECT_FROM_CURRENY';\r\nexport const AMOUNT_CURRENY ='AMOUNT_CURRENY';\r\nexport const SET_CURRENSIS ='SET_CURRENSIS';\r\nexport const CONVERT_CURRENSIS ='CONVERT_CURRENSIS';\r\n","import React from 'react';\r\nimport './components/CurrencyContiener.css';\r\nimport CurrencyContianer from './components/CurrencyContiener';\r\nimport { Container } from 'reactstrap';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n  <div className=\"parent\">\r\n  <Container>\r\n    <h2><span>Currency </span> Converter <span role=\"img\" aria-label=\"money\">&#x1f4b5;</span> </h2>\r\n    <CurrencyContianer/>\r\n    </Container>\r\n  </div>\r\n)};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actions from '../actions/actionsType';\r\n\r\nconst intialState={\r\n  result: 0,\r\n  fromCurrency: \"USDUSD\",\r\n  toCurrency: \"USDGBP\",\r\n  amount: 1,\r\n  currencies: [],\r\n};\r\n\r\nconst Reducer =  (state=intialState,action)=>{\r\n\r\n\r\n  switch (action.type) {\r\n    case actions.CONVERTER_ACTION:\r\n          return {...state,result:action.payload.result}\r\n      break;\r\n    case actions.SELECT_TO_CURRENY:\r\n          return {...state,toCurrency:action.payload.toCurrency}\r\n      break;\r\n    case actions.SELECT_FROM_CURRENY:\r\n          return {...state,fromCurrency:action.payload.fromCurrency}\r\n      break;\r\n    case actions.AMOUNT_CURRENY:\r\n          return {...state,amount:action.payload.amount}\r\n      return state;\r\n      break;\r\n    case actions.SET_CURRENSIS:\r\n      return {...state,currencies:action.payload.currencies}\r\n      break;\r\n    default:\r\n      return state;\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default  Reducer","import {combineReducers} from 'redux';\r\nimport converterReducer from './converterReducer';\r\n\r\nexport default combineReducers ({\r\n  converter:converterReducer,\r\n});\r\n","import {createStore} from 'redux';\r\nimport reducer from './reducer/index';\r\n\r\n\r\n//get data from server and edited the state every data\r\n\r\nconst store=createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store.js';\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(\n  <Provider store={store} >\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}